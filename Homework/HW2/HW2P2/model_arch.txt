C=[3, 64,128,256,512,1024] # CHANNELs

# Define ResidualBlock for ResNet architecture
class ResidualBlock(torch.nn.Module):
    def __init__(self, in_channels, out_channels, stride=1):
        super().__init__()
        # Main branch: two conv layers
        self.conv1 = torch.nn.Conv2d(in_channels, out_channels, kernel_size=3, stride=stride, padding=1, bias=False)
        self.bn1 = torch.nn.BatchNorm2d(out_channels)
        self.relu = torch.nn.ReLU(inplace=True)
        self.conv2 = torch.nn.Conv2d(out_channels, out_channels, kernel_size=3, stride=1, padding=1, bias=False)
        self.bn2 = torch.nn.BatchNorm2d(out_channels)
        
        # Shortcut branch: if shape changes, adjust with 1x1 conv
        self.shortcut = torch.nn.Sequential()
        if stride != 1 or in_channels != out_channels:
            self.shortcut = torch.nn.Sequential(
                torch.nn.Conv2d(in_channels, out_channels, kernel_size=1, stride=stride, bias=False),
                torch.nn.BatchNorm2d(out_channels)
            )
            
    def forward(self, x):
        # Compute the residual
        residual = self.relu(self.bn1(self.conv1(x)))
        residual = self.bn2(self.conv2(residual))
        
        # Shortcut: either identity or projection
        identity = self.shortcut(x)
        
        # Element-wise addition followed by activation
        out = self.relu(residual + identity)
        return out

class Network(torch.nn.Module):
    def __init__(self, num_classes):
        super().__init__()
        
        # Initial stem layer (similar to original layer 1)
        self.stem = torch.nn.Sequential(
            # layer 1 - modified to be first part of ResNet
            torch.nn.Conv2d(C[0], C[1], 7, stride=2, padding=3),
            torch.nn.BatchNorm2d(C[1]),
            torch.nn.ReLU(),
            torch.nn.MaxPool2d(kernel_size=3, stride=2, padding=1)
        )
        
        # Residual layers (replacing original layers 2-5)
        self.layer1 = self._make_layer(C[1], C[1], num_blocks=2, stride=1)
        self.layer2 = self._make_layer(C[1], C[2], num_blocks=2, stride=2)
        self.layer3 = self._make_layer(C[2], C[3], num_blocks=2, stride=2)
        self.layer4 = self._make_layer(C[3], C[4], num_blocks=2, stride=2)
        self.layer5 = self._make_layer(C[4], C[5], num_blocks=2, stride=1)
        
        # Adaptive average pooling to get 1x1 spatial dimensions
        self.avgpool = torch.nn.AdaptiveAvgPool2d(1)
        
        # Flatten the 1x1 spatial dimensions
        self.flatten = torch.nn.Flatten()
        
        # Classification layer: Linear layer from C[5] to num_classes
        # fully connected (Linear) layer to map the features to the desired number of output classes.
        self.cls_layer = torch.nn.Linear(C[5], num_classes)
    
    def _make_layer(self, in_channels, out_channels, num_blocks, stride):
        layers = []
        # First block (handles downsampling if needed)
        layers.append(ResidualBlock(in_channels, out_channels, stride))
        
        # Remaining blocks (keep size the same)
        for _ in range(1, num_blocks):
            layers.append(ResidualBlock(out_channels, out_channels, stride=1))
            
        return torch.nn.Sequential(*layers)
        
    def forward(self, x):
        # Process through stem and residual layers
        x = self.stem(x)
        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        x = self.layer4(x)
        x = self.layer5(x)
        
        # Global pooling and flatten
        x = self.avgpool(x)
        feats = self.flatten(x)
        
        # Classification layer
        out = self.cls_layer(feats)
        
        return {"feats": feats, "out": out}

model = Network(num_classes=config['num_classes']).to(DEVICE)
summary(model, (3, 112, 112))